% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sigex.acf.r
\name{sigex.acf}
\alias{sigex.acf}
\title{Compute the autocovariance function of a differenced latent component}
\usage{
sigex.acf(L.par, D.par, mdl, comp, mdlPar, delta, maxlag, freqdom = FALSE)
}
\arguments{
\item{L.par}{Unit lower triangular matrix in GCD of the component's
white noise covariance matrix.}

\item{D.par}{Vector of logged entries of diagonal matrix in GCD
of the component's white noise covariance matrix.}

\item{mdl}{The specified sigex model, a list object}

\item{comp}{Index of the latent component}

\item{mdlPar}{This is the portion of param
corresponding to mdl[[2]], cited as param[[3]]}

\item{delta}{Differencing polynomial (corresponds to eta(B) in Background)
written in format c(delta0,delta1,...,deltad)}

\item{maxlag}{Number of autocovariances required}

\item{freqdom}{A flag, indicating whether frequency domain acf routine should be used.}
}
\value{
x.acf: matrix of dimension N x N*maxlag, consisting of autocovariance
		matrices stacked horizontally
}
\description{
Background:
	A sigex model consists of process x = sum y, for
stochastic components y.  Each component process y_t
	is either stationary or is reduced to stationarity by
	application of a differencing polynomial delta(B), i.e.
		w_t = delta(B) y_t   is stationary.
	We have a model for each w_t process, and can compute its
	autocovariance function (acf), and denote its autocovariance
	generating function (acgf) via gamma_w (B).
		Sometimes we may over-difference,
	which means applying a differencing polynomial eta(B) that
	contains delta(B) as a factor: eta(B) = delta(B)*nu(B).
	Then  eta(B) y_t = nu(B) w_t, and the corresponding
	acgf is   nu(B) * nu(B^{-1}) * gamma_w (B).
}
\details{
Notes: this function computes the over-differenced acgf,
	it is presumed that the given eta(B) contains the needed delta(B)
	for that particular component.
Conventions: ARMA and VAR models use minus convention for (V)AR polynomials,
  and additive convention for (V)MA polynomials.  SARMA and SVARMA use
  minus convention for all polynomials.
}
